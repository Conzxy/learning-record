#!/bin/python3
import sys

def GenTestCMakeLists(project_name):
    return """#enable_testing()
# 获取test和benchmark的所有源文件
file(GLOB {1}_TEST_SOURCES "${{PROJECT_SOURCE_DIR}}/test/*/*test*.cc")
file(GLOB {1}_BENCH_SOURCES "${{PROJECT_SOURCE_DIR}}/test/*/*bench*.cc")

############################################
# User can determine whether to build all tests when build target all
# e.g. cmake --build */{0}/build [--target all -j 2]
############################################
# 默认将test目标从all目标中排除
set(BUILD_ALL_TESTS OFF CACHE BOOL "Don't exclude tests from target all")
message(STATUS "BUILD_ALL_TESTS = ${{BUILD_ALL_TESTS}}")

message(STATUS "{0} test source files: ${{{1}_TEST_SOURCES}}")
message(STATUS "{0} bench source files: ${{{1}_BENCH_SOURCES}}")

if (NOT ${{BUILD_ALL_TESTS}})
  message(STATUS "[The {0} test and bench files are excluded from the build of target all]")
endif (NOT ${{BUILD_ALL_TESTS}})

# 生成测试文件对应的可执行文件
# 
# \\param SRC The variable including all test file(*.cc)
# \\param ... Libraries
macro (GenTest SRC)
  foreach ({0}_test_source ${{${{SRC}}}})
    # 将扩展名去掉(*.cc -> *)
    get_filename_component({0}_test_filename ${{{0}_test_source}} NAME_WE)

    if (${{BUILD_ALL_TESTS}})
      add_executable(${{{0}_test_filename}} ${{{0}_test_source}})
    else ()
      message(STATUS "${{{0}_test_filename}} is excluded from target all")
      add_executable(${{{0}_test_filename}} EXCLUDE_FROM_ALL ${{{0}_test_source}})
    endif (${{BUILD_ALL_TESTS}})

    target_link_libraries(${{{0}_test_filename}} ${{ARGN}})
    set_target_properties(${{{0}_test_filename}}
      PROPERTIES
      RUNTIME_OUTPUT_DIRECTORY "${{CMAKE_BINARY_DIR}}/test"
      COMMAND ${{{0}_test_filename}}
    )

    add_test(NAME ${{{0}_test_filename}} COMMAND ${{{0}_test_filename}})
  endforeach ({0}_test_source ${{{1}_TEST_SOURCES}})
endmacro()

############################################
# generate test and bench program
############################################
# 单元测试依赖gtest
# 基准测试依赖benchmark
# 用户可根据需要替换
# 至于其他依赖项也可以在尾部追加
# GenTest({1}_TEST_SOURCES gtest gtest_main)
# GenTest({1}_BENCH_SOURCES benchmark benchmark_main)
""".format(project_name, project_name.upper())

if len(sys.argv) < 3:
    print("Usage: " + sys.argv[0] + " project_name output_filename")
    exit(0)

project_name = sys.argv[1]
output_filename = sys.argv[2]
output_file = open(output_filename, "w")
output_file.write(GenTestCMakeLists(project_name))
output_file.close()
